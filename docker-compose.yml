# Docker Compose file for TheZoo 
version: "3.3"
# service                 Exposed Port        Volumes
# MWDB-Core                 8000                TBD 
# minio                   8010,9020             TBD
# Redis                     8030                TBD
# karton-dashboard          8080                TBD

services:
#############################
#  Minio Storage container #
############################
  minio:
    image: minio/minio
    command: server /data
    volumes:
      - /tmp/minio:/data
    ports:
      - "8010:9000"
      - "8020:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3 
    env_file:
      - mwdb-vars.env

#############################
#  Redis container         #
############################
  redis:
    image: redis:alpine
#    ports:
#      - "8030:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

#############################
#  Postgres DB container    #
############################
  postgres:
    image: postgres
    restart: always
    env_file:
      - mwdb-vars.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

#############################
#   MWDB-core container    #
############################
  mwdb:
    build:
      context: ./mwdb-core
      dockerfile: deploy/docker/Dockerfile
    depends_on:
      - postgres
      - redis
      - minio
    restart: on-failure
    env_file:
      # NOTE: use gen_vars.sh in order to generate this file
      - mwdb-vars.env
    volumes:
      - "./TheZoo_volume/karton/karton.ini:/etc/karton/karton.ini"
      - "./TheZoo_volume/karton/mwdb.ini:/app/mwdb.ini"
      - "./TheZoo_volume/mwdb/mail_templates:/app/mail_templates"
      - "./TheZoo_volume/mwdb/app:/app/mwdb"

#############################
#   MWDB-web container     #
############################
  mwdb-web:
    depends_on:
      - mwdb
    build:
      context: ./mwdb-core
      dockerfile: deploy/docker/Dockerfile-web
    ports:
      - "0.0.0.0:8000:80"
    volumes:
      - "./TheZoo_volume/mwdb/public:/app/public"
      - "./TheZoo_volume/mwdb/src:/app/src"
    restart: on-failure

#############################
#  karton engine container #
############################
  karton-system:
    build:
      context: ./karton
      dockerfile: Dockerfile
    depends_on:
      - redis
      - minio
    volumes:
      - "./TheZoo_volume/karton/karton.ini:/etc/karton/karton.ini"
    entrypoint: karton-system
    command: --setup-bucket

#################################
# karton classifier container  #
################################
  karton-classifier:
    build:
      context: karton_plugins/karton-classifier
      dockerfile: Dockerfile 
    depends_on:
      - redis
      - minio
    volumes:
      - "./TheZoo_volume/karton/karton.ini:/etc/karton/karton.ini"

#################################
#  karton dashboard container  #
################################
  karton-dashboard:
    build:
      context: karton_plugins/karton-dashboard
      dockerfile: Dockerfile 
    depends_on:
      - redis
      - minio
    volumes:
      - "./TheZoo_volume/karton/karton.ini:/etc/karton/karton.ini"
    ports:
      - "0.0.0.0:8080:5000"

#################################
#  karton reporter container   #
################################
  karton-mwdb-reporter:
    build:
      context: ./karton_plugins/karton-dashboard
      dockerfile: Dockerfile 
    depends_on:
      - redis
      - minio
    volumes:
      - "./TheZoo_volume/karton/karton.ini:/etc/karton/karton.ini"
